@using Coevery.Core.OptionSet.Settings
@model Coevery.Core.OptionSet.ViewModels.OptionSetFieldViewModel
@{
    var settings = Model.Settings;
    var required = settings.Required ? "required" : null;
    var validateHelper = settings.Required && (settings.ListMode == ListMode.Radiobutton) ?
        "groupValidationHelper" : null;
}

<label class="control-label title @required" >@Model.DisplayName</label>
<div class="control controls @validateHelper errortips">
    @switch (settings.ListMode) {
        case ListMode.Dropdown:
            var selectAttributes = new Dictionary<string, object> {{"class", "span12"}};
            if (!string.IsNullOrWhiteSpace(required)) {
                selectAttributes.Add(required, null);
            }

            if (!string.IsNullOrWhiteSpace(settings.HelpText)) {
                selectAttributes.Add("help-text", settings.HelpText);
            }

            var options = Model.OptionItems.Select(t => new SelectListItem {Text = t.Name, Value = t.Name, Selected = t.Name == Model.Value});
            @Html.DropDownListFor(m => m.Value, options, string.Empty, selectAttributes)
            for (int i = 0; i < Model.OptionItems.Count; i++) {
                @Html.HiddenFor(m => m.OptionItems[i].Id)
            }
            break;

        case ListMode.Radiobutton:
            foreach (var entry in Model.OptionItems) {
                <label class="radio">
                    @{
                        var disabled = !entry.Selectable;
                        <input @if (disabled) {
                                   <text>disabled="disabled"</text>
                               } 
                            type="radio" 
                            value="@entry.Name" 
                            @if (entry.IsChecked) {
                                <text>checked="checked"</text>
                            } 
                            name="@Html.FieldNameFor(m => m.Value)" 
                            data-term="@entry.Name.ToLower()" 
                            @if (!string.IsNullOrWhiteSpace(settings.HelpText)) {
                                <text>help-text='@settings.HelpText'</text>
                            } 
                            />
                    }
                    @entry.Name
                </label>
            }
            if (!string.IsNullOrWhiteSpace(validateHelper)) {
                @Html.Hidden("void", null, new {required = "", id = "groupValidationPart"})
            }
            break;
    }
    @Html.HiddenFor(m => m.OptionSetId)
</div>

@using (Script.Foot()) {
    <script type="text/javascript">
        $(function() {
            $(".groupValidationHelper input[type='radio'], .groupValidationHelper input[type='checkbox']").change(function() {
                if ($(".groupValidationHelper input:checked").length > 0) {
                    $("#groupValidationPart").val("true");
                } else {
                    $("#groupValidationPart").val("");
                }
            });

            if ($(".groupValidationHelper input:checked").length > 0) {
                $("#groupValidationPart").val("true");
            }
        });
    </script>
}