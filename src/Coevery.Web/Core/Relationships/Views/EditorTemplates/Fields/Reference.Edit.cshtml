@model Coevery.Core.Relationships.Models.ReferenceFieldViewModel
@using System.Web.Mvc.Html
@using Coevery.Core.Relationships.Settings
@using Coevery.Mvc.Html
@{
    Script.Require("tagsinput");
    Style.Require("tagsinput");
    
    var settings = Model.Field.PartFieldDefinition.Settings.GetModel<ReferenceFieldSettings>();
    var required = settings.Required ? "required" : null;
    var selectAttributes = new Dictionary<string, object> { { "class", "textMedium span12" } };
    if (settings.Required)
    {
        selectAttributes.Add("required", "");
    }

    if (!string.IsNullOrWhiteSpace(settings.HelpText))
    {
        selectAttributes.Add("help-text", settings.HelpText);
    }
}
<label class="span3 control-label @required" for="@Html.FieldIdFor(m => m.ContentId)">@Model.Field.DisplayName</label>
<div class="control controls errortips">
    <div class="input-group">
        <input type="text" class="form-control" id="@Html.IdFor(m=>m.SelectedText)" value="@Model.SelectedText">
        <span class="input-group-btn">
            <a data-toggle="modal" data-backdrop="static"
               data-reference-model="toggle"
               data-display-field="@settings.DisplayFieldName"
               data-valude-field-id="@Html.IdFor(m=>m.ContentId)"
               data-dsiplay-field-id="@Html.IdFor(m => m.SelectedText)"
               data-modal-url="@Url.Action("Index", "EntityPicker",  new {
                           area = "Relationships",
                           relatedEntityName=Model.RelatedEntityDefinition.Name,
                           fieldName = Model.Field.Name
                  })" class="btn" href="#">@T("Select...")</a>
                <div class="modal hide" tabindex="-1">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                        <h3>@T("Choose {0}", Model.RelatedEntityDefinition.DisplayName)</h3>
                    </div>
                    <div class="modal-body">
                        <iframe width="100%" height="380px" frameborder="0" scrolling="yes" allowtransparency="true"></iframe>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary btn-ok">@T("OK")</button>
                        <button type="button" data-dismiss="modal" class="btn">@T("Cancel")</button>
                    </div>
                </div>
            </span>
        </div>
        @Html.HiddenFor(m => m.ContentId)

    </div>
    @using (Script.Foot())
    {
        <script>
            $(function () {
                $('#@Html.IdFor(m=>m.SelectedText)').tagsInput({
                    interactive: false,
                    height: '20px',
                    onRemoveTag: function () {
                        $('#@Html.IdFor(m=>m.ContentId)').val('');
                    }
                });
            });
        </script>
        // prevent the shape from being rendered twice in a page
        if (WorkContext.GetState<object>("ReferenceEditScript") != null)
        {
            return;
        }

        WorkContext.SetState("ReferenceEditScript", new object());
        <script type="text/javascript">
            //<![CDATA[
            (function ($) {
                $(function () {
                    $(document).off('click.modal.data-api').on('click.modal.iframe', '[data-reference-model="toggle"]', function (e) {
                        var $this = $(this),
                            href = $this.attr('href'),
                            $target = $this.next('.modal'),
                            option = $target.data('modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data());

                        e.preventDefault();
                        var baseUrl = $this.data("modal-url");
                        var callbackName = "_entitypicker_" + new Date().getTime();
                        $target.find('iframe').attr('src', baseUrl + '&callback=' + callbackName);
                        $[callbackName] = function (returnData) {
                            $this.data('result', returnData);
                        };

                        $target.find('.btn-ok').click(function () {
                            var result = $this.data("result");
                            var displayField = $this.data('display-field');
                            if (result && displayField) {
                                var valueFieldId = $this.data("valude-field-id");
                                var displayFieldId = $this.data("dsiplay-field-id");
                                $('#' + displayFieldId).importTags(result[displayField]);
                                $('#' + valueFieldId).val(result['Id']);
                            }
                            $target.modal('hide');
                        });

                        $target.one('hide', function () {
                            delete $[callbackName];
                        });
                        $target
                            .modal(option)
                            .one('hide', function () {
                                $this.focus();
                            });
                    });

                });
            })(window.jQuery);
            //]]>
        </script>
    }