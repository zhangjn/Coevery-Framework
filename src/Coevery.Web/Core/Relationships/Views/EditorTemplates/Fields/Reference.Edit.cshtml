@model Coevery.Core.Relationships.Models.ReferenceFieldViewModel
@using System.Web.Mvc.Html
@using Coevery.ContentManagement
@using Coevery.Core.Relationships.Settings
@using Coevery.DisplayManagement.Shapes
@using Coevery.Mvc.Html
@{
    Script.Require("tagsinput");
    Style.Require("tagsinput");

    var settings = Model.Field.PartFieldDefinition.Settings.GetModel<ReferenceFieldSettings>();
    var required = settings.Required ? "required" : null;
    var selectAttributes = new Dictionary<string, object> { { "class", "textMedium span12" } };
    if (settings.Required)
    {
        selectAttributes.Add("required", "");
    }

    if (!string.IsNullOrWhiteSpace(settings.HelpText)) {
        selectAttributes.Add("help-text", settings.HelpText);
    }
    var parameters = Model.Field.RetrieveParameters();
    var relatedEntityName = Model.RelatedEntityDefinition.Name;
    var fieldName = Model.Field.Name;
    var gridId = relatedEntityName.ToLower() + fieldName + "Grid";
    var listViewModel = new
    {
        GridId = gridId,
        GridOptions = new Dictionary<string, object> {
            {"multiselect", false},
            {"scroll", 1},
            {"height", 300},
            {"autowidth", false}
        }
    };
    IDictionary<string, object> gridOptions = parameters.GridOptions;
    if (gridOptions != null) {
        foreach (var option in gridOptions) {
            listViewModel.GridOptions[option.Key] = option.Value;
        }
    }
    Shape shape = New.Parts_ListViewGrid(listViewModel);
    shape.Metadata.Alternates.Add("Parts_ListViewGrid__" + relatedEntityName);
}

<label class="span3 control-label @required" for="@Html.FieldIdFor(m => m.ContentId)">@Model.Field.DisplayName</label>
<div class="control controls errortips">
    <div class="input-group">
        @Html.HiddenFor(x => x.ContentId, new { @class = "span12", data_text = Model.SelectedText })
        <div class="hide" tabindex="-1">
            @Display(shape)
        </div>
    </div>

</div>
@using (Script.Foot())
{
    <script>
        $(function () {
            $('#@Html.FieldIdFor(m => m.ContentId)').referenceEditor();
        });
    </script>
    // prevent the shape from being rendered twice in a page
    if (WorkContext.GetState<object>("ReferenceEditScript") != null)
    {
        return;
    }

    WorkContext.SetState("ReferenceEditScript", new object());
    <script type="text/javascript">
    //<![CDATA[
    (function ($) {
        $.fn.referenceEditor = function () {
            return this.each(function() {
                var $this = $(this);
                var $modal = $this.next('div.hide');
                $this.select2({
                    ajax: {
                        url: "@parameters.DropdownUrl",
                        dataType: 'json',
                        type: 'post',
                        data: function(term, page) {
                            return {
                                term: term, // search term
                                page: page
                            };
                        },
                        results: function(data, page) {
                            //var more = (page * 10) < data.total;
                            return { results: $.merge(data.records, [{ "text": "更多选择...", "css": "more-data" }]) };
                        }
                    },
                    //formatResult: function (result, container, query, escapeMarkup) {
                    //    var markup = [];
                    //    window.Select2.util.markMatch(result.OrderNumber, query.term, markup, escapeMarkup);
                    //    return markup.join("");
                    //},
                    //formatSelection: function (data, container, escapeMarkup) {
                    //    return data ? escapeMarkup(data.OrderNumber) : undefined;
                    //},
                    initSelection: function(element, callback) {
                        if (element.val()) {
                            var data = { id: element.val(), text: element.data('text') };
                            callback(data);
                        }
                    }
                });
                var $select2 = $this.data("select2");
                $select2.dropdown.on("mouseup", '.select2-results', $select2.bind(function(e) {
                    if ($(e.target).closest(".more-data").length > 0) {
                        $select2.close();
                        if (!$modal.data("kendoWindow")) {
                            $modal.kendoWindow({
                                width: "600px",
                                modal: true,
                                title: "@T("Choose {0}", Model.RelatedEntityDefinition.DisplayName)",
                                actions: ["Close"]
                            });
                        }
                        var dialog = $modal.data("kendoWindow");
                        dialog.center().open();
                    }
                }));

                $('#@gridId').jqGrid('setGridParam', {
                    onSelectRow: function() {
                        var grid = $(this);
                        var rowId = grid.jqGrid('getGridParam', 'selrow');
                        var result = grid.getRowData(rowId);
                        $select2.data({ "id": result.Id, "text": result['@settings.DisplayFieldName'] });
                        var dialog = $modal.data("kendoWindow");
                        dialog.close();
                    }
                });
                var gridContainer = $modal.find(".ui-jqgrid").parent();
                gridContainer.find('div:not(.ui-jqgrid-titlebar,.ui-jqgrid-resize-mark,.loading),section').width("100%");
            });
        };
    })(window.jQuery);
    //]]>
    </script>
}