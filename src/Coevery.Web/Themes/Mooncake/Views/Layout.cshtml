@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix) {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    /* Global includes for the theme
    ***************************************************************/

    SetMeta("X-UA-Compatible", "IE=edge,chrome=1");
    Style.Include("http://fonts.googleapis.com/css?family=Lobster&subset=latin");
    WorkContext.Layout.Header.Add(Display.BaseResource());
    WorkContext.Layout.Header.Add(Display.MooncakeResource());
    
    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/
    
    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new[] { "AsideFirst", "AsideSecond" }, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass)) {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = CalcuClassify(new[] { "TripelFirst", "TripelSecond", "TripelThird" }, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (HasText(tripelClass)) {
        Model.Classes.Add(tripelClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new[] { "FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth" }, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass)) {
        Model.Classes.Add(footerQuadClass);
    }

    /* Inserting some ad hoc shapes
    ***************************************************************/
    
   
    WorkContext.Layout.Header.Add(New.Branding(), "5"); // Site name and link to the home page

    /* Last bit of code to prep the layout wrapper
    ***************************************************************/

    Model.Id = "wrapper";
    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model
}
@tag.StartElement

@if (Model.Header != null) {
    <header id="header" class="navbar navbar-inverse">
        <div class="navbar-inner">
            <div class="container">
                <div class="brand-wrap pull-left">
                    <div class="brand-img">
                        <a class="brand" href="@Href("~/")" style="font-size: 30px;">
                            <img src="@Href("~/Themes/MooncakeBase/Styles/images/coevery.png")" alt="" >
                            Coevery
                        </a>
                    </div>
                </div>

                <div id="header-right" class="clearfix">
                    <div id="nav-toggle" data-toggle="collapse" data-target="#navigation" class="collapsed">
                        <i class="icon-caret-down"></i>
                    </div>
                    <div id="header-functions" class="pull-right">
                        <div id="user-info" class="clearfix">
                            <span class="info">Welcome
                                <span class="name">@WorkContext.CurrentUser.UserName</span>
                            </span>
                            <div class="avatar">
                                <a class="dropdown-toggle" href="#" data-toggle="dropdown">
                                    <img src="@Href("~/Themes/MooncakeBase/Styles/images/user.jpg")" alt="Avatar">
                                </a>
                                <ul class="dropdown-menu pull-right">
                                    <li><a href="#"><i class="icol-user"></i>&nbsp;My Profile</a></li>
                                    <li><a href="@Href("~/devtools#/Entities")"><i class="icol-application-key"></i>&nbsp;Admin</a></li>
                                    <li class="divider"></li>
                                    <li>
                                        <a href="@Url.Action( "LogOff", new {Controller = "Account", Area = "Coevery.Users", ReturnUrl = Context.Request.RawUrl})" rel="nofollow">
                                            <i class="icol-key"> </i>
                                            @T("Logout")
                                        </a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                        <div id="logout-ribbon">
                            <a href="@Url.Action( "LogOff", new {Controller = "Account", Area = "Coevery.Users", ReturnUrl = Context.Request.RawUrl})" rel="nofollow">
                                <i class="icon-off"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>
}

<div id="content-wrap">
    <div id="content" class="sidebar-minimized">
        <div id="content-outer">
            <div id="content-inner">
                <aside id="sidebar" class="affix">
                    @if (Model.Navigation != null) {
                        @Zone(Model.Navigation)
                    }
                </aside>

                <div id="sidebar-separator"></div>
                <section id="main" class="clearfix">
                    @Zone(Model.Content)
                </section>
            </div>
        </div>
    </div>
</div>

@if (Model.Footer != null) {
    @Zone(Model.Footer)
}

<footer>
    <p class="pull-left">Powered by Coevery - <a href="http://www.novasoftware.com">http://www.novasoftware.com</a></p>
    <p class="pull-right">Copyright 2013. All Rights Reserved.</p>
</footer>


@tag.EndElement

@using (Script.Head()) {
    <script>
        window.applicationBaseUrl = '@Html.Raw(HttpUtility.JavaScriptStringEncode(Url.Content("~/")))';
    </script>
}