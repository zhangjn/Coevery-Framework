<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ include file="ListViewCommon.ttinclude" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ parameter type="System.String" name="EntityTypeName" #>
<#@ parameter type="System.String" name="ViewName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ output extension=".txt" #>
@{
    Style.Require("jqGrid");
    Style.Require("jqGridCustom");
    Script.Require("jqGrid");
}

<div class="row-fluid">
    <table id="<#=ViewName.ToLower()#>Grid"></table>
    <section id="<#=ViewName.ToLower()#>GridPager"></section>
</div>

@using (Script.Foot()) {
    <script type="text/javascript">
        jQuery("#<#=ViewName.ToLower()#>Grid").jqGrid({
            url: '@Href("~/api/<#=Namespace#>/<#=ViewName#>Api")',
            datatype: "json",
            colModel: <#=GetGridColumnJSONString()#>,
            rowNum: 10,
            rowList: [10, 20, 30],
            pager: '#<#=ViewName.ToLower()#>GridPager',
            viewrecords: true,
            height: '100%',
            pagerpos: "right",
            recordpos: "left",
            sortable: true,
            headertitles: true,
            multiselect: true,
            multiboxonly: true,
            autowidth: true,
            jsonReader: {
                page: "page",
                total: "totalPages",
                records: "totalRecords",
                repeatitems: false
            }
        });
    </script>
}


<#+

    private string GetGridColumnJSONString() {
        var jsonColumns = new JArray();
        var columns = GetColumns(EntityTypeName);
        foreach (var gridColumn in columns) {
            var column = new JObject();
            column["name"] = gridColumn.Name;
            column["label"] = gridColumn.Label;
            if (gridColumn.Hidden)
                column["hidden"] = true;
            if (gridColumn.IsKey)
                column["key"] = true;
            jsonColumns.Add(column);
        }
        return JsonConvert.SerializeObject(jsonColumns);
    }
#>