// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Coevery.DeveloperTools.CodeGeneration.CodeGenerationTemplates
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Work\Coevery-Framework\src\Coevery.Web\DeveloperTools\CodeGeneration\CodeGenerationTemplates\ControllerTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class ControllerTemplate : ControllerTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System.Net;\r\nusing System.Web.Mvc;\r\nusing Coevery;\r\nusing Coevery.ContentMa" +
                    "nagement;\r\nusing Coevery.Localization;\r\nusing Coevery.Themes;\r\nusing ");
            
            #line 11 "D:\Work\Coevery-Framework\src\Coevery.Web\DeveloperTools\CodeGeneration\CodeGenerationTemplates\ControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write(".Models;\r\n\r\nnamespace ");
            
            #line 13 "D:\Work\Coevery-Framework\src\Coevery.Web\DeveloperTools\CodeGeneration\CodeGenerationTemplates\ControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write(".Controllers {\r\n    public class ");
            
            #line 14 "D:\Work\Coevery-Framework\src\Coevery.Web\DeveloperTools\CodeGeneration\CodeGenerationTemplates\ControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ControllerName));
            
            #line default
            #line hidden
            this.Write("Controller : Controller , IUpdateModel{\r\n        public ICoeveryServices Services" +
                    " { get; set; }\r\n\t\tpublic Localizer T { get; set; }\r\n\r\n\r\n        public ");
            
            #line 19 "D:\Work\Coevery-Framework\src\Coevery.Web\DeveloperTools\CodeGeneration\CodeGenerationTemplates\ControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ControllerName));
            
            #line default
            #line hidden
            this.Write("Controller (ICoeveryServices services) {\r\n            Services = services;\r\n     " +
                    "       T = NullLocalizer.Instance;\r\n        }\r\n\r\n\t\tpublic ActionResult Index() {" +
                    "\r\n            var contentItem = Services.ContentManager.New(\"");
            
            #line 25 "D:\Work\Coevery-Framework\src\Coevery.Web\DeveloperTools\CodeGeneration\CodeGenerationTemplates\ControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ControllerName));
            
            #line default
            #line hidden
            this.Write("\");\r\n            contentItem.Weld(new ");
            
            #line 26 "D:\Work\Coevery-Framework\src\Coevery.Web\DeveloperTools\CodeGeneration\CodeGenerationTemplates\ControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ControllerName));
            
            #line default
            #line hidden
            this.Write(@"Part());
            var model = Services.ContentManager.BuildDisplay(contentItem, ""List"");
            return View(model);
        }


        public ActionResult Details(int id) {
            return View();
        }

        public ActionResult Create() {
            var contentItem = Services.ContentManager.New(""");
            
            #line 37 "D:\Work\Coevery-Framework\src\Coevery.Web\DeveloperTools\CodeGeneration\CodeGenerationTemplates\ControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ControllerName));
            
            #line default
            #line hidden
            this.Write(@""");
            var model = Services.ContentManager.BuildEditor(contentItem);
            return View(model);
        }

        [HttpPost, ActionName(""Create"")]
        public ActionResult CreatePost() {
            var contentItem = Services.ContentManager.New(""");
            
            #line 44 "D:\Work\Coevery-Framework\src\Coevery.Web\DeveloperTools\CodeGeneration\CodeGenerationTemplates\ControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ControllerName));
            
            #line default
            #line hidden
            this.Write("\");\r\n            Services.ContentManager.UpdateEditor(contentItem, this);\r\n\t\t\tSer" +
                    "vices.ContentManager.Create(contentItem, VersionOptions.Draft);\r\n\t\t\tServices.Con" +
                    "tentManager.Publish(contentItem);\r\n            return new HttpStatusCodeResult(H" +
                    "ttpStatusCode.OK);\r\n        }\r\n\r\n\r\n        public ActionResult Edit(int id) {\r\n " +
                    "           var contentItem = Services.ContentManager.Get(id, VersionOptions.Late" +
                    "st);\r\n\r\n            if (contentItem == null) {\r\n                return HttpNotFo" +
                    "und();\r\n            }\r\n            dynamic model = Services.ContentManager.Build" +
                    "Editor(contentItem);\r\n            return View((object)model);\r\n        }\r\n\r\n\r\n  " +
                    "      [HttpPost]\r\n        public ActionResult EditPost(int id, FormCollection co" +
                    "llection) {\r\n            try {\r\n                // TODO: Add update logic here\r\n" +
                    "\r\n                return RedirectToAction(\"Index\");\r\n            }\r\n            " +
                    "catch {\r\n                return View();\r\n            }\r\n        }\r\n\r\n\r\n        p" +
                    "ublic ActionResult Delete(int id) {\r\n            return View();\r\n        }\r\n\r\n  " +
                    "      [HttpPost]\r\n        public ActionResult DeletePost(int id, FormCollection " +
                    "collection) {\r\n            try {\r\n                // TODO: Add delete logic here" +
                    "\r\n\r\n                return RedirectToAction(\"Index\");\r\n            }\r\n          " +
                    "  catch {\r\n                return View();\r\n            }\r\n        }\r\n\r\n        b" +
                    "ool IUpdateModel.TryUpdateModel<TModel>(TModel model, string prefix, string[] in" +
                    "cludeProperties, string[] excludeProperties) {\r\n            return TryUpdateMode" +
                    "l(model, prefix, includeProperties, excludeProperties);\r\n        }\r\n\r\n        vo" +
                    "id IUpdateModel.AddModelError(string key, LocalizedString errorMessage) {\r\n     " +
                    "       ModelState.AddModelError(key, errorMessage.ToString());\r\n        }\r\n\r\n   " +
                    " }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\Work\Coevery-Framework\src\Coevery.Web\DeveloperTools\CodeGeneration\CodeGenerationTemplates\ControllerTemplate.tt"

private string _NamespaceField;

/// <summary>
/// Access the Namespace parameter of the template.
/// </summary>
private string Namespace
{
    get
    {
        return this._NamespaceField;
    }
}

private string _ControllerNameField;

/// <summary>
/// Access the ControllerName parameter of the template.
/// </summary>
private string ControllerName
{
    get
    {
        return this._ControllerNameField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool NamespaceValueAcquired = false;
if (this.Session.ContainsKey("Namespace"))
{
    if ((typeof(string).IsAssignableFrom(this.Session["Namespace"].GetType()) == false))
    {
        this.Error("The type \'System.String\' of the parameter \'Namespace\' did not match the type of t" +
                "he data passed to the template.");
    }
    else
    {
        this._NamespaceField = ((string)(this.Session["Namespace"]));
        NamespaceValueAcquired = true;
    }
}
if ((NamespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Namespace");
    if ((data != null))
    {
        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.String\' of the parameter \'Namespace\' did not match the type of t" +
                    "he data passed to the template.");
        }
        else
        {
            this._NamespaceField = ((string)(data));
        }
    }
}
bool ControllerNameValueAcquired = false;
if (this.Session.ContainsKey("ControllerName"))
{
    if ((typeof(string).IsAssignableFrom(this.Session["ControllerName"].GetType()) == false))
    {
        this.Error("The type \'System.String\' of the parameter \'ControllerName\' did not match the type" +
                " of the data passed to the template.");
    }
    else
    {
        this._ControllerNameField = ((string)(this.Session["ControllerName"]));
        ControllerNameValueAcquired = true;
    }
}
if ((ControllerNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ControllerName");
    if ((data != null))
    {
        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.String\' of the parameter \'ControllerName\' did not match the type" +
                    " of the data passed to the template.");
        }
        else
        {
            this._ControllerNameField = ((string)(data));
        }
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class ControllerTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
