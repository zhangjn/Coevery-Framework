<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="ListViewCommon.ttinclude" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="EntityName" #>
using System;
using System.Collections.Generic;

namespace <#=Namespace#>.ViewModels {
    public sealed class <#=EntityName#>ListViewModel {
		public int Id { get; set; }
		public int VersionId { get; set; }
<#foreach (var field in GetFields()) {#>
		public <#= field.Item2.GetFriendlyName() #> <#=field.Item1 #>{ get; set; }
<# } #>
    }
}
<#+

	private IEnumerable<Tuple<string,Type>> GetFields() {
        var columns = GetColumns(EntityName);
        var partDefinition = GetContentPartDefinition(EntityName);
        foreach (var col in columns) {
            var field = partDefinition.Fields.FirstOrDefault(f => f.Name == col);
            if (field != null) {
                if (field.FieldDefinition.Name == "ReferenceField") {
                    yield return new Tuple<string, Type>(field.Name + "_Name", typeof (string));
                }
				var fileType = GetFieldType(field.FieldDefinition.Name);
                yield return new Tuple<string, Type>(field.Name, fileType);
            }
        }
    }

#>