<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ include file="ListViewCommon.ttinclude" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ parameter type="System.String" name="EntityName" #>
@using Coevery.Utility.Extensions;
@{
    Style.Require("jqGrid");
    Style.Require("jqGridCustom");
    Script.Require("jqGrid");
	Script.Require("jqGrid_i18n");
}

<div class="row-fluid">
    <table id="<#=EntityName.ToLower()#>Grid"></table>
    <section id="<#=EntityName.ToLower()#>GridPager"></section>
</div>
@Html.AntiForgeryToken()

@using (Script.Foot()) {
    <script type="text/javascript">
		function updateButtonStatus() {
            var selectedRowIds = $('#<#=EntityName.ToLower()#>Grid').jqGrid('getGridParam', 'selarrrow');
            $("#btnEdit").toggle(selectedRowIds.length == 1);
            $("#btnDelete").toggle(selectedRowIds.length > 0);
        }

        $.extend(jQuery.jgrid.defaults, {
            prmNames: {
                page: 'page',
                rows: 'pageSize',
                sort: 'sortBy',
                order: 'sortOrder'
            }
        });
        $('#<#=EntityName.ToLower()#>Grid').jqGrid({
            url: '@Url.Action("List")',
            datatype: 'json',
			mtype: 'POST',
            postData: {
                __RequestVerificationToken: function () {
                var magicToken = $("input[name=__RequestVerificationToken]").first();
                if (magicToken.length == 0) { return null; } // no sense in continuing if form POSTS will fail
                return magicToken.val();
                }
            },
            colModel: <#=GetGridColumnJSONString()#>,
            rowNum: 10,
            rowList: [10, 20, 30],
            pager: '#<#=EntityName.ToLower()#>GridPager',
            viewrecords: true,
            height: '100%',
            pagerpos: 'right',
            recordpos: 'left',
            sortable: true,
            headertitles: true,
            multiselect: true,
            multiboxonly: true,
            autowidth: true,
            jsonReader: {
                page: 'page',
                total: 'totalPages',
                records: 'totalRecords',
                repeatitems: false
            },
            onSelectRow: function() {
                updateButtonStatus();
            },
            gridComplete: function() {
                updateButtonStatus();
            }
        });
        $('#btnEdit').click(function() {
            var selectedRowIds = $('#<#=EntityName.ToLower()#>Grid').jqGrid('getGridParam', 'selarrrow');
            if (selectedRowIds.length == 0) return;
            window.location.href = '@Url.Action("Edit")/' + selectedRowIds[0]+'?returnUrl=@ViewContext.RequestContext.HttpContext.Request.ToUrlString()';
        });
        $('#btnDelete').click(function () {
            var selectedIds = $('#<#=EntityName.ToLower()#>Grid').jqGrid('getGridParam', 'selarrrow');
		    if (selectedIds.length == 0) return;
		    var magicToken = $("input[name=__RequestVerificationToken]").first();
		    if (magicToken.length == 0) {
		        return;
		    } // no sense in continuing if form POSTS will fail
		    var confirm = window.confirm($.jgrid.del.msg);
		    if (!confirm) return;

			$.ajax({
		            url: '@Url.Action("Delete")',
		            data: { selectedIds: selectedIds, __RequestVerificationToken: magicToken.val() },
		            type: "POST",
		            traditional: true
		        })
		        .done(function(response) {
		            $('#<#=EntityName.ToLower()#>Grid').trigger('reloadGrid');
		        })
		        .fail(function(jqXHR, textStatus, errorThrown) {
		            alert(textStatus);
		        });
        });
        $('#btnRefresh').click(function () {
            $('#<#=EntityName.ToLower()#>Grid').trigger('reloadGrid');
        });
    </script>
}


<#+

    private string GetGridColumnJSONString() {
        var jsonColumns = new JArray();
        var columns = GetColumns(EntityName);
		var partDefinition = GetContentPartDefinition(EntityName);
        foreach (var gridColumn in columns) {
            var field = partDefinition.Fields.FirstOrDefault(f => f.Name == gridColumn.Name);
            if (field != null) {
                var column = new JObject();
                column["name"] = field.Name;
                column["index"] = field.Name;
                column["label"] = field.DisplayName;
                if (gridColumn.Hidden)
                    column["hidden"] = true;
                if (gridColumn.IsKey)
                    column["key"] = true;
                jsonColumns.Add(column);
            }
        }
        return JsonConvert.SerializeObject(jsonColumns);
    }
#>