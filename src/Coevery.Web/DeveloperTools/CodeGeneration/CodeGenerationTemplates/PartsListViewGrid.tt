<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="ListViewCommon.ttinclude" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ parameter type="System.String" name="EntityName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#
	var gridInfo = GetDefaultGridInfo(EntityName);
    int pageSize = 50;
    string sortedBy = string.Empty;
    string sortOrder = "asc";
    if (gridInfo != null) {
        pageSize = int.Parse(gridInfo.GridSettings[GridInfoSettings.PageRowCount]);
        sortedBy = gridInfo.GridSettings[GridInfoSettings.SortColumn];
        sortOrder = gridInfo.GridSettings[GridInfoSettings.SortMode];
    }
#>
@{
    Style.Require("jqGrid");
    Style.Require("jqGridCustom");
    Script.Require("jqGrid");
	Script.Require("jqGrid_i18n");
    Script.Require("moment");

    var gridPagerId = Model.GridId + "Pager";
}

<div class="row-fluid">
    <table id="@Model.GridId"></table>
    <section id="@gridPagerId"></section>
</div>
@Html.AntiForgeryToken()

@using (Script.Foot()) {
    <script type="text/javascript">
		moment.lang('@WorkContext.CurrentCulture.ToLower()');
        function utcDateFormatter(cellvalue, options, rowObject) {
            if (cellvalue) {
                return moment(cellvalue).format('l');
            } else {
                return '';
            }
        }

        function utcDateTimeFormatter(cellvalue, options, rowObject) {
            if (cellvalue) {
                return moment(cellvalue).format('l LT');
            } else {
                return '';
            }
        }

        $.extend(jQuery.jgrid.defaults, {
		    prmNames: {
		        page: 'page',
		        rows: 'pageSize',
		        sort: 'sortBy',
		        order: 'sortOrder'
		    },
		    datatype: 'json',
		    mtype: 'POST',
		    postData: {
		        __RequestVerificationToken: function() {
		            var magicToken = $("input[name=__RequestVerificationToken]").first();
		            if (magicToken.length == 0) {
		                return null;
		            } // no sense in continuing if form POSTS will fail
		            return magicToken.val();
		        }
		    },
		    viewrecords: true,
		    height: '100%',
		    pagerpos: 'right',
		    recordpos: 'left',
		    sortable: true,
		    headertitles: true,
		    multiselect: true,
		    multiboxonly: true,
		    autowidth: true,
		    jsonReader: {
		        page: 'page',
		        total: 'totalPages',
		        records: 'totalRecords',
		        repeatitems: false
		    }
		});

		var gridOptions = {
		    url: '@Url.Action("List","<#=EntityName#>",  new { area = "<#=Namespace#>" })',
		    colModel: <#=GetGridColumnJSONString()#>,
		    pager: '#@gridPagerId',
		    rowNum: <#=pageSize#>,
            rowList: [<#=pageSize#>, <#=pageSize*2#>, <#=pageSize*3#>],
		    sortname: '<#=sortedBy#>', 
			sortorder: '<#=sortOrder#>'
		};

		@if (Model.GridOptions != null) {
		    var json = Html.Raw(Json.Encode(Model.GridOptions));
            WriteLiteral("		$.extend(gridOptions, " + json + ");");
		}

		$('#@Model.GridId').jqGrid(gridOptions);
        
    </script>
}
<#+

    private string GetGridColumnJSONString() {
        var columns = GetFieldObjects().ToArray();
        var json = JsonConvert.SerializeObject(columns);
        return json;
    }

	private IEnumerable<JObject> GetFieldObjects() {
        var columns = GetColumns(EntityName);
        var partDefinition = GetContentPartDefinition(EntityName);
        foreach (var col in columns) {
            var field = partDefinition.Fields.FirstOrDefault(f => f.Name == col);
            if (field != null ) {
                var column = new JObject();
                column["name"] = field.Name;
                column["index"] = field.Name;
                column["label"] = field.DisplayName;
                column["sortable"] = (field.FieldDefinition.Name != "OptionSetField" && field.FieldDefinition.Name != "ReferenceField");
                if (field.FieldDefinition.Name == "ReferenceField") {
                    column["hidden"] = true;
                    var refernceNameColumn = new JObject();
                    refernceNameColumn["name"] = field.Name + "_Name";
					refernceNameColumn["label"] = field.DisplayName;
                    refernceNameColumn["sortable"] = false;
                    yield return refernceNameColumn;
                }
                switch (field.FieldDefinition.Name) {
                    case "BooleanField":
                        column["formatter"] = "checkbox";
                        break;
                    case "CurrencyField":
                        column["formatter"] = "currency";
                        break;
                    case "DateField":
						column["formatter"] = new JRaw("utcDateFormatter");
						column["sorttype"] = "date";
						break;
                    case "DatetimeField":
                        column["formatter"] = new JRaw("utcDateTimeFormatter");
                        column["sorttype"] = "date";
                        break;
                    case "NumberField":
                        column["formatter"] = "number";
                        break;
                }
                yield return column;
            }
        }
		var keyColumn = new JObject();
        keyColumn["name"] = "Id";
        keyColumn["hidden"] = true;
        keyColumn["key"] = true;
	    yield return keyColumn;
	}

#>

