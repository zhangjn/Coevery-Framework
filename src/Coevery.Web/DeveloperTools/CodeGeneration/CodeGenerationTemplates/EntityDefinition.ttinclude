<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web" #>
<#@ assembly name="Coevery.Core" #>
<#@ assembly name="Coevery.DeveloperTools" #>
<#@ import namespace="Coevery.ContentManagement" #>
<#@ import namespace="Coevery.ContentManagement.Drivers" #>
<#@ import namespace="Coevery.ContentManagement.Handlers" #>
<#@ import namespace="Coevery.ContentManagement.MetaData" #>
<#@ import namespace="Coevery.ContentManagement.MetaData.Models" #>
<#@ import namespace="Coevery.Core.Common.Extensions" #>
<#@ import namespace="Coevery.Core.Settings.Metadata.Parts" #>
<#@ import namespace="Coevery.DeveloperTools.CodeGeneration.Services" #>
<#@ import namespace="Coevery.DeveloperTools.CodeGeneration.Utils" #>
<#@ import namespace="Coevery.DeveloperTools.EntityManagement.Services" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="Coevery.ICoeveryServices" name="Services" #>
<#+

    public IEnumerable<ContentTypeDefinitionPart> GetEntities() {
        var entityMetadataService = Services.WorkContext.Resolve<IEntityMetadataService>();
        return entityMetadataService.GetEntities(VersionOptions.Published);
    }

    public ContentPartDefinition GetContentPartDefinition(string entityName) {
        var contentDefinitionManager = Services.WorkContext.Resolve<IContentDefinitionManager>();
        var partDefinition = contentDefinitionManager.GetPartDefinition(entityName + "Part");
        return partDefinition;
    }

    public Type GetFieldType(string fieldNameType) {
        var contentFieldDrivers = Services.WorkContext.Resolve<IEnumerable<IContentFieldDriver>>();
        var drivers = contentFieldDrivers.Where(x => x.GetFieldInfo().Any(fi => fi.FieldTypeName == fieldNameType)).ToList();
        Type defaultType = typeof (string);
        var membersContext = new DescribeMembersContext(
            (storageName, storageType, displayName, description) => { defaultType = storageType; });
        foreach (var driver in drivers) {
            driver.Describe(membersContext);
        }
        return defaultType;
    }

    public string GetColumnSettingsString(ContentPartFieldDefinition field) {
        var contentFieldDrivers = Services.WorkContext.Resolve<IEnumerable<IContentFieldDriver>>();
        var fieldNameType = field.FieldDefinition.Name;
        var driver = contentFieldDrivers.FirstOrDefault(x => x.GetFieldInfo().Any(fi => fi.FieldTypeName == fieldNameType));
        return driver != null ? driver.GetColumnSettingsString(field.Settings) : null;
    }

#>