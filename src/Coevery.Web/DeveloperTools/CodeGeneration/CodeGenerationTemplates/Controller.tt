<#@ template debug="false" language="C#" hostspecific="true"#>
<#@ include file="ListViewCommon.ttinclude" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="EntityName" #>
using System.Linq;
using System.Collections.Generic;
using System.Net;
using System.Web.Mvc;
using Coevery;
using Coevery.UI.Notify;
using Coevery.ContentManagement;
using Coevery.ContentManagement.MetaData;
using Coevery.Data;
using Coevery.Themes;
using Coevery.Localization;
using Coevery.Core.OptionSet.Services;
using Coevery.Core.Common.Extensions;
using <#=Namespace#>.Models;
using <#=Namespace#>.ViewModels;

namespace <#=Namespace#>.Controllers {
	[Themed]
    public class <#=EntityName#>Controller : Controller , IUpdateModel{
        private readonly ITransactionManager _transactionManager;
		private readonly IOptionSetService _optionSetService;
	    private readonly IContentDefinitionManager _contentDefinitionManager;

        public <#=EntityName#>Controller (ICoeveryServices services, 
			ITransactionManager transactionManager, 
            IOptionSetService optionSetService, 
            IContentDefinitionManager contentDefinitionManager) {
            Services = services;
            _transactionManager = transactionManager;
			_optionSetService = optionSetService;
            _contentDefinitionManager = contentDefinitionManager;
            T = NullLocalizer.Instance;
        }

		public ICoeveryServices Services { get; set; }
		public Localizer T { get; set; }

		public ActionResult Index() {
            return List();
        }

		public ActionResult List() {
            var contentItem = Services.ContentManager.New("<#=EntityName#>");
            contentItem.Weld(new <#=EntityName#>Part());
            var model = Services.ContentManager.BuildDisplay(contentItem, "List");
            return View("List", model);
        }

		[HttpPost]
		public ActionResult List(int page = 1, int pageSize = 10, string sortBy = null, string sortOrder = "asc") {
	        var query = Services.ContentManager.Query<<#=EntityName#>Part, <#=EntityName#>PartRecord>();
	        var totalRecords = query.Count();
	        var records = query
	            .OrderBy(sortBy, sortOrder)
	            .Slice((page - 1)*pageSize, pageSize)
	            .Select(item => new <#=EntityName#>ListViewModel{
					Id = item.Record.ContentItemRecord.Id,
<# foreach (var field in GetPrimaryFields()) {#>
					<#=field.Name#> = item.Record.<#=field.Name#>,
<#}#>
				}).ToList();
<#	
	var optionSetFields = GetOptionSetFields().ToList();
    if (optionSetFields.Any()) { #>
			foreach (var model in records) {
<# foreach (var field in optionSetFields) { #>
	            model.<#=field.Name #> = GetOptionSetFieldValue(model.Id, "<#=field.Name #>");
<# } #>
	        }
<# } #>
<#	
	var referenceFields = GetReferenceFields().ToList();
    if (referenceFields.Any()) { #>

			var fields = _contentDefinitionManager.GetPartDefinition("<#=EntityName#>Part").Fields;

<# foreach (var field in referenceFields) { 
			var fieldName = field.Name.ToLower();#>
			var <#=fieldName#>Field = fields.First(x => x.Name == "<#=field.Name#>");
            var <#=fieldName#>DisplayFieldName = <#=fieldName#>Field.Settings["ReferenceFieldSettings.DisplayFieldName"];
            var <#=fieldName#>ReferencePartName = <#=fieldName#>Field.Settings["ReferenceFieldSettings.ContentTypeName"].ToPartName();
            var <#=fieldName#>Records = records.Where(x => x.<#=field.Name#>.HasValue).Select(x => x).ToList();
            var <#=fieldName#>Ids = <#=fieldName#>Records.Select(x => x.<#=field.Name#>.Value);
            var <#=fieldName#>ContentItems = Services.ContentManager.Query().ForContentItems(<#=fieldName#>Ids).List().ToDictionary(x => x.Id);
            foreach (var record in <#=fieldName#>Records) {
                var <#=fieldName#>Id = record.<#=field.Name#>.Value;
                if (!<#=fieldName#>ContentItems.ContainsKey(<#=fieldName#>Id)) {
                    continue;
                }
                var displayField = <#=fieldName#>ContentItems[record.<#=field.Name#>.Value].Parts
                    .First(x => x.PartDefinition.Name == <#=fieldName#>ReferencePartName)
                    .Fields.First(x => x.Name == <#=fieldName#>DisplayFieldName);

                record.<#=field.Name#>_Name = displayField.Storage.Get<dynamic>(null);
            }

<# } #>
<# } #>
	        var result = new {
	            page,
	            totalPages = totalRecords/pageSize,
	            totalRecords,
	            rows = records
	        };
	        return Json(result);
	    }

		private string GetOptionSetFieldValue(int id, string fieldName) {
            var optionItems = _optionSetService.GetOptionItemsForContentItem(id, fieldName).ToList();
            var value = string.Join(", ", optionItems.Select(t => t.Name).ToArray());
	        return value;
	    }

        public ActionResult Detail(int id) {
            var contentItem = Services.ContentManager.Get(id, VersionOptions.Latest);
            if (contentItem == null) {
                return HttpNotFound();
            }

            dynamic model = Services.ContentManager.BuildDisplay(contentItem, "Detail");
            return View((object) model);
        }

        public ActionResult Create() {
            var contentItem = Services.ContentManager.New("<#=EntityName#>");
            var model = Services.ContentManager.BuildEditor(contentItem, "Create");
            return View(model);
        }

        [HttpPost, ActionName("Create")]
        public ActionResult CreatePost(string returnUrl) {
            var contentItem = Services.ContentManager.New("<#=EntityName#>");
            dynamic model = Services.ContentManager.UpdateEditor(contentItem, this, "Create");
            if (!ModelState.IsValid) {
                return View("Create", (object) model);
            }
            Services.ContentManager.Create(contentItem, VersionOptions.Draft);
            Services.ContentManager.Publish(contentItem);
            Services.Notifier.Information(T("<#=EntityName#> created"));
            return RedirectToAction("Edit", new { id = contentItem.Id, returnUrl });
        }

        public ActionResult Edit(int id) {
            var contentItem = Services.ContentManager.Get(id, VersionOptions.Latest);
            if (contentItem == null) {
                return HttpNotFound();
            }

            dynamic model = Services.ContentManager.BuildEditor(contentItem, "Edit");
            return View((object)model);
        }

        [HttpPost, ActionName("Edit")]
        public ActionResult EditPost(int id, string returnUrl) {
			var contentItem = Services.ContentManager.Get(id, VersionOptions.Latest);
            if (contentItem == null) {
                return HttpNotFound();
            }

            dynamic model = Services.ContentManager.UpdateEditor(contentItem, this, "Edit");
            if (!ModelState.IsValid) {
                _transactionManager.Cancel();
                return View("Edit", (object) model);
            }
            Services.Notifier.Information(T("<#=EntityName#> information updated"));
            return RedirectToAction("Edit", new {id, returnUrl});
        }

        public ActionResult Delete(int id) {
            return View();
        }

        [HttpPost]
        public ActionResult Delete(List<int> selectedIds){
            try {
                var items = Services.ContentManager.Query().ForContentItems(selectedIds).List();
                foreach (var item in items) {
                    Services.ContentManager.Remove(item);
                }
                return new HttpStatusCodeResult(HttpStatusCode.OK, T("Delete succeeded").Text);
            }
            catch {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest, T("Delete failed").Text);
            }
        }

        bool IUpdateModel.TryUpdateModel<TModel>(TModel model, string prefix, string[] includeProperties, string[] excludeProperties) {
            return TryUpdateModel(model, prefix, includeProperties, excludeProperties);
        }

        void IUpdateModel.AddModelError(string key, LocalizedString errorMessage) {
            ModelState.AddModelError(key, errorMessage.ToString());
        }
    }
}

<#+

    private IEnumerable<ContentPartFieldDefinition> GetPrimaryFields() {
        var columns = GetColumns(EntityName);
        var partDefinition = GetContentPartDefinition(EntityName);
        foreach (var col in columns) {
            var field = partDefinition.Fields.FirstOrDefault(f => f.Name == col.Name);
            if (field != null && field.FieldDefinition.Name != "OptionSetField") {
                yield return field;
            }
        }
    }

	private IEnumerable<ContentPartFieldDefinition> GetOptionSetFields() {
        var columns = GetColumns(EntityName);
        var partDefinition = GetContentPartDefinition(EntityName);
        foreach (var col in columns) {
            var field = partDefinition.Fields.FirstOrDefault(f => f.Name == col.Name);
            if (field != null && field.FieldDefinition.Name == "OptionSetField") {
                yield return field;
            }
        }
	}

	private IEnumerable<ContentPartFieldDefinition> GetReferenceFields() {
        var columns = GetColumns(EntityName);
        var partDefinition = GetContentPartDefinition(EntityName);
        foreach (var col in columns) {
            var field = partDefinition.Fields.FirstOrDefault(f => f.Name == col.Name);
            if (field != null && field.FieldDefinition.Name == "ReferenceField") {
                yield return field;
            }
        }
	}

#>