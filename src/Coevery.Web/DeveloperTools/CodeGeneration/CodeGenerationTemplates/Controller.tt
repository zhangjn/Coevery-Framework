<#@ template debug="false" language="C#" hostspecific="true"#>
<#@ include file="ListViewCommon.ttinclude" #>
<#@ import namespace="Coevery.Core.Relationships.Settings" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="EntityName" #>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Net;
using System.Web.Mvc;
using Coevery;
using Coevery.UI.Notify;
using Coevery.ContentManagement;
using Coevery.Data;
using Coevery.Themes;
using Coevery.Localization;
using <#=Namespace#>.Models;
using <#=Namespace#>.ViewModels;

namespace <#=Namespace#>.Controllers {
	[Themed]
    public class <#=EntityName#>Controller : Controller , IUpdateModel{
        private readonly ITransactionManager _transactionManager;

        public <#=EntityName#>Controller (ICoeveryServices services, 
			ITransactionManager transactionManager) {
            Services = services;
            _transactionManager = transactionManager;
            T = NullLocalizer.Instance;
        }

		public ICoeveryServices Services { get; set; }
		public Localizer T { get; set; }

		public ActionResult Index() {
            return List();
        }

		public ActionResult List() {
            var contentItem = Services.ContentManager.New("<#=EntityName#>");
            contentItem.Weld(new <#=EntityName#>Part());
            var model = Services.ContentManager.BuildDisplay(contentItem, "List");
            return View("List", model);
        }

		[HttpPost]
		public ActionResult List(int page = 1, int pageSize = 10, string sortBy = null, string sortOrder = "asc") {
	        var query = Services.ContentManager.Query<<#=EntityName#>Part, <#=EntityName#>PartRecord>();
	        var totalRecords = query.Count();
	        var records = query
	            .OrderBy(sortBy, sortOrder)
	            .Slice((page - 1)*pageSize, pageSize)
	            .Select(item => new <#=EntityName#>ListViewModel{
					Id = item.Record.ContentItemRecord.Id,
					VersionId = item.Record.Id,
<#  var columns = GetColumns(EntityName);
    var partDefinition = GetContentPartDefinition(EntityName);
	foreach (var field in GetPrimaryFields(columns, partDefinition)) {#>
					<#=field.Name#> = <# if (field.FieldDefinition.Name == "DateField" || field.FieldDefinition.Name == "DatetimeField") {#>SpecifyDateTimeKind(item.Record.<#=field.Name#>)<#}
else if(field.FieldDefinition.Name == "OptionSetField") {#>item.Record.<#=field.Name#>.ToString()<#} else {#>item.Record.<#=field.Name#><#} #>,
<#}#>
				}).ToList();
<#	
	var fieldsDictionary = GetReferenceFields(columns, partDefinition);
    if (fieldsDictionary.Count > 0) {
		foreach (var item in fieldsDictionary) {
		    var recordsName = item.Key.ToLower() + "Records";
#>

            var <#=recordsName#> = Services.ContentManager.Query<<#=item.Key#>Part, <#=item.Key#>PartRecord>().List().ToDictionary(x => x.Id);
            foreach (var record in records) {
<#
		foreach (var field in item.Value) {
		    var settings = field.Settings.TryGetModel<ReferenceFieldSettings>();
		    var displayField = settings.DisplayFieldName;
		    var fieldName = field.Name;#>
				if (record.<#=fieldName#>.HasValue && <#=recordsName#>.ContainsKey(record.<#=fieldName#>.Value)) {
					record.<#=fieldName#>_Name = <#=recordsName#>[record.<#=fieldName#>.Value].<#=displayField#>;
                }
<# } #>
            }

<# } #>
<# } #>
	        var result = new {
	            page,
	            totalPages = totalRecords/pageSize,
	            totalRecords,
	            rows = records
	        };
	        return Json(result);
	    }

		private DateTime? SpecifyDateTimeKind(DateTime? utcDateTime) {
            if (utcDateTime != null)
                return DateTime.SpecifyKind(utcDateTime.Value, DateTimeKind.Utc);
	        return null;
	    }

        public ActionResult Detail(int id) {
            var contentItem = Services.ContentManager.Get(id, VersionOptions.Latest);
            if (contentItem == null) {
                return HttpNotFound();
            }

            dynamic model = Services.ContentManager.BuildDisplay(contentItem, "Detail");
            return View((object) model);
        }

        public ActionResult Create() {
            var contentItem = Services.ContentManager.New("<#=EntityName#>");
            var model = Services.ContentManager.BuildEditor(contentItem, "Create");
            return View(model);
        }

        [HttpPost, ActionName("Create")]
        public ActionResult CreatePost(string returnUrl) {
            var contentItem = Services.ContentManager.New("<#=EntityName#>");
            dynamic model = Services.ContentManager.UpdateEditor(contentItem, this, "Create");
            if (!ModelState.IsValid) {
                return View("Create", (object) model);
            }
            Services.ContentManager.Create(contentItem, VersionOptions.Draft);
            Services.ContentManager.Publish(contentItem);
            Services.Notifier.Information(T("<#=EntityName#> created"));
            return RedirectToAction("Edit", new { id = contentItem.Id, returnUrl });
        }

        public ActionResult Edit(int id) {
            var contentItem = Services.ContentManager.Get(id, VersionOptions.Latest);
            if (contentItem == null) {
                return HttpNotFound();
            }

            dynamic model = Services.ContentManager.BuildEditor(contentItem, "Edit");
            return View((object)model);
        }

        [HttpPost, ActionName("Edit")]
        public ActionResult EditPost(int id, string returnUrl) {
			var contentItem = Services.ContentManager.Get(id, VersionOptions.Latest);
            if (contentItem == null) {
                return HttpNotFound();
            }

            dynamic model = Services.ContentManager.UpdateEditor(contentItem, this, "Edit");
            if (!ModelState.IsValid) {
                _transactionManager.Cancel();
                return View("Edit", (object) model);
            }
            Services.Notifier.Information(T("<#=EntityName#> information updated"));
            return RedirectToAction("Edit", new {id, returnUrl});
        }

        public ActionResult Delete(int id) {
            return View();
        }

        [HttpPost]
        public ActionResult Delete(List<int> selectedIds){
            try {
                var items = Services.ContentManager.Query().ForContentItems(selectedIds).List();
                foreach (var item in items) {
                    Services.ContentManager.Remove(item);
                }
				Services.Notifier.Information(T("Delete succeeded!"));
                return new HttpStatusCodeResult(HttpStatusCode.OK, T("Delete succeeded").Text);
            }
            catch {
			    Services.Notifier.Error(T("Delete failed!"));
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest, T("Delete failed").Text);
            }
        }

        bool IUpdateModel.TryUpdateModel<TModel>(TModel model, string prefix, string[] includeProperties, string[] excludeProperties) {
            return TryUpdateModel(model, prefix, includeProperties, excludeProperties);
        }

        void IUpdateModel.AddModelError(string key, LocalizedString errorMessage) {
            ModelState.AddModelError(key, errorMessage.ToString());
        }
    }
}

<#+

    private IEnumerable<ContentPartFieldDefinition> GetPrimaryFields(IEnumerable<string> columns, ContentPartDefinition partDefinition) {
        foreach (var col in columns) {
            var field = partDefinition.Fields.FirstOrDefault(f => f.Name == col);
            if (field != null) {
                yield return field;
            }
        }
    }

	private Dictionary<string, List<ContentPartFieldDefinition>> GetReferenceFields(IEnumerable<string> columns, ContentPartDefinition partDefinition) {
	    var fieldsDictionary = new Dictionary<string, List<ContentPartFieldDefinition>>();
        foreach (var col in columns) {
            var field = partDefinition.Fields.FirstOrDefault(f => f.Name == col);
            if (field != null && field.FieldDefinition.Name == "ReferenceField") {
				var settings = field.Settings.TryGetModel<ReferenceFieldSettings>();
                var typeName = settings.ContentTypeName;
                if (!fieldsDictionary.ContainsKey(typeName)) {
                    fieldsDictionary[typeName] = new List<ContentPartFieldDefinition>();
                }
				fieldsDictionary[typeName].Add(field);
            }
        }
	    return fieldsDictionary;
	}

#>