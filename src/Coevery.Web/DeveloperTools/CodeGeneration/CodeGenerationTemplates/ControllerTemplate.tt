<#@ template debug="false" language="C#" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="ControllerName" #>
using System.Net;
using System.Web.Mvc;
using Coevery;
using Coevery.ContentManagement;
using Coevery.Localization;
using <#=Namespace#>.Models;

namespace <#=Namespace#>.Controllers {
    public class <#=ControllerName#>Controller : Controller , IUpdateModel{
        public ICoeveryServices Services { get; set; }
		public Localizer T { get; set; }

        public <#=ControllerName#>Controller (ICoeveryServices services) {
            Services = services;
            T = NullLocalizer.Instance;
        }

		public ActionResult Index() {
            var contentItem = Services.ContentManager.New("<#=ControllerName#>");
            contentItem.Weld(new <#=ControllerName#>Part());
            var model = Services.ContentManager.BuildDisplay(contentItem, "List");
            return View(model);
        }

        public ActionResult Details(int id) {
            return View();
        }

        public ActionResult Create() {
            var contentItem = Services.ContentManager.New("<#=ControllerName#>");
            var model = Services.ContentManager.BuildEditor(contentItem, "Create");
            return View(model);
        }

        [HttpPost, ActionName("Create")]
        public ActionResult CreatePost() {
            var contentItem = Services.ContentManager.New("<#=ControllerName#>");
            Services.ContentManager.UpdateEditor(contentItem, this);
			Services.ContentManager.Create(contentItem, VersionOptions.Draft);
			Services.ContentManager.Publish(contentItem);
            return new HttpStatusCodeResult(HttpStatusCode.OK);
        }

        public ActionResult Edit(int id) {
            var contentItem = Services.ContentManager.Get(id, VersionOptions.Latest);

            if (contentItem == null) {
                return HttpNotFound();
            }
            dynamic model = Services.ContentManager.BuildEditor(contentItem, "Edit");
            return View((object)model);
        }

        [HttpPost, ActionName("Edit")]
        public ActionResult EditPost(int id, FormCollection collection) {
            var contentItem = Services.ContentManager.Get(id, VersionOptions.Latest);

            if (contentItem == null) {
                return HttpNotFound();
            }
            dynamic model = Services.ContentManager.UpdateEditor(contentItem, this, "Edit");
            return View((object) model);
        }

        public ActionResult Delete(int id) {
            return View();
        }

        [HttpPost]
        public ActionResult DeletePost(int id, FormCollection collection) {
            try {
                // TODO: Add delete logic here

                return RedirectToAction("Index");
            }
            catch {
                return View();
            }
        }

        bool IUpdateModel.TryUpdateModel<TModel>(TModel model, string prefix, string[] includeProperties, string[] excludeProperties) {
            return TryUpdateModel(model, prefix, includeProperties, excludeProperties);
        }

        void IUpdateModel.AddModelError(string key, LocalizedString errorMessage) {
            ModelState.AddModelError(key, errorMessage.ToString());
        }
    }
}
