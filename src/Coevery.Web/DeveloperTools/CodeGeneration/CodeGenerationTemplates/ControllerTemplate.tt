<#@ template debug="false" language="C#" #>
<#@ include file="ListViewCommon.ttinclude" #>
<#@ import namespace="Coevery.DeveloperTools.CodeGeneration.Services" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="Coevery.DeveloperTools.CodeGeneration.Services.DynamicDefinition" name="ModelDefinition" #>
using System.Linq;
using System.Collections.Generic;
using System.Net;
using System.Web.Mvc;
using Coevery;
using Coevery.ContentManagement;
using Coevery.Data;
using Coevery.Themes;
using Coevery.Localization;
using <#=Namespace#>.Models;
using <#=Namespace#>.ViewModels;

namespace <#=Namespace#>.Controllers {
	[Themed]
    public class <#=ModelDefinition.Name#>Controller : Controller , IUpdateModel{
        private readonly ITransactionManager _transactionManager;

        public <#=ModelDefinition.Name#>Controller (ICoeveryServices services, ITransactionManager transactionManager) {
            Services = services;
            _transactionManager = transactionManager;
            T = NullLocalizer.Instance;
        }

		public ICoeveryServices Services { get; set; }
		public Localizer T { get; set; }

		public ActionResult Index() {
            var contentItem = Services.ContentManager.New("<#=ModelDefinition.Name#>");
            contentItem.Weld(new <#=ModelDefinition.Name#>Part());
            var model = Services.ContentManager.BuildDisplay(contentItem, "List");
            return View(model);
        }

		[HttpPost]
		public ActionResult List(int page = 1, int pageSize = 10, string sortBy = null, string sortOrder = "asc") {
	        var query = Services.ContentManager.Query<<#=ModelDefinition.Name#>Part, <#=ModelDefinition.Name#>PartRecord>();
	        var totalRecords = query.Count();
	        var records = query
	            .OrderBy(sortBy, sortOrder)
	            .Slice((page - 1)*pageSize, pageSize)
	            .Select(item => new <#=ModelDefinition.Name#>ListViewModel{
					Id = item.Record.Id,
<# foreach (var field in GetFields()) {#>
					<#=field.Name#> = item.Record.<#=field.Name#>,
<#}#>
				}).ToList();
	        var result = new {
	            page,
	            totalPages = totalRecords/pageSize,
	            totalRecords,
	            rows = records
	        };
	        return Json(result);
	    }

        public ActionResult Detail(int id) {
            var contentItem = Services.ContentManager.Get(id, VersionOptions.Latest);
            if (contentItem == null) {
                return HttpNotFound();
            }

            dynamic model = Services.ContentManager.BuildDisplay(contentItem, "Detail");
            return View((object) model);
        }

        public ActionResult Create() {
            var contentItem = Services.ContentManager.New("<#=ModelDefinition.Name#>");
            var model = Services.ContentManager.BuildEditor(contentItem, "Create");
            return View(model);
        }

        [HttpPost, ActionName("Create")]
        public ActionResult CreatePost() {
            var contentItem = Services.ContentManager.New("<#=ModelDefinition.Name#>");
            dynamic model = Services.ContentManager.UpdateEditor(contentItem, this, "Create");
            if (!ModelState.IsValid) {
                return View("Create", (object) model);
            }
            Services.ContentManager.Create(contentItem, VersionOptions.Draft);
            Services.ContentManager.Publish(contentItem);
            return RedirectToAction("Edit", new { id = contentItem.Id });
        }

        public ActionResult Edit(int id) {
            var contentItem = Services.ContentManager.Get(id, VersionOptions.Latest);
            if (contentItem == null) {
                return HttpNotFound();
            }

            dynamic model = Services.ContentManager.BuildEditor(contentItem, "Edit");
            return View((object)model);
        }

        [HttpPost, ActionName("Edit")]
        public ActionResult EditPost(int id) {
			var contentItem = Services.ContentManager.Get(id, VersionOptions.Latest);
            if (contentItem == null) {
                return HttpNotFound();
            }

            dynamic model = Services.ContentManager.UpdateEditor(contentItem, this, "Edit");
            if (!ModelState.IsValid) {
                _transactionManager.Cancel();
                return View("Edit", (object) model);
            }
            return RedirectToAction("Edit", new {id});
        }

        public ActionResult Delete(int id) {
            return View();
        }

        [HttpPost]
        public ActionResult Delete(List<int> selectedIds){
            try {
                var items = Services.ContentManager.Query().ForContentItems(selectedIds).List();
                foreach (var item in items) {
                    Services.ContentManager.Remove(item);
                }
                return new HttpStatusCodeResult(HttpStatusCode.OK, T("Delete succeeded").Text);
            }
            catch {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest, T("Delete failed").Text);
            }
        }

        bool IUpdateModel.TryUpdateModel<TModel>(TModel model, string prefix, string[] includeProperties, string[] excludeProperties) {
            return TryUpdateModel(model, prefix, includeProperties, excludeProperties);
        }

        void IUpdateModel.AddModelError(string key, LocalizedString errorMessage) {
            ModelState.AddModelError(key, errorMessage.ToString());
        }
    }
}

<#+

    private IEnumerable<DynamicFieldDefinition> GetFields() {
        var columns = GetColumns(ModelDefinition.Name);
        foreach (var col in columns) {
            var field = ModelDefinition.Fields.FirstOrDefault(f => f.Name == col.Name);
            if (field != null) {
                yield return field;
            }
        }
    }

#>