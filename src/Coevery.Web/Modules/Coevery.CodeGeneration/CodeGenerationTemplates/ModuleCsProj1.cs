// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Coevery.CodeGeneration.CodeGenerationTemplates
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "F:\Shinetech\Coevery-Framework-V1\src\Coevery.Web\Modules\Coevery.CodeGeneration\CodeGenerationTemplates\ModuleCsProj.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class ModuleCsProj : ModuleCsProjBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"4.0\" DefaultTarget" +
                    "s=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <Impor" +
                    "t Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.prop" +
                    "s\" Condition=\"Exists(\'$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft." +
                    "Common.props\')\" />\r\n  <PropertyGroup>\r\n    <Configuration Condition=\" \'$(Configu" +
                    "ration)\' == \'\' \">Debug</Configuration>\r\n    <Platform Condition=\" \'$(Platform)\' " +
                    "== \'\' \">AnyCPU</Platform>\r\n    <ProductVersion>9.0.30729</ProductVersion>\r\n    <" +
                    "SchemaVersion>2.0</SchemaVersion>\r\n    <ProjectTypeGuids>{349c5851-65df-11da-938" +
                    "4-00065b846f21};{fae04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>\r\n    <" +
                    "OutputType>Library</OutputType>\r\n    <AppDesignerFolder>Properties</AppDesignerF" +
                    "older>\r\n    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>\r\n    <MvcBuild" +
                    "Views>false</MvcBuildViews>\r\n    <FileUpgradeFlags>\r\n    </FileUpgradeFlags>\r\n  " +
                    "  <OldToolsVersion>4.0</OldToolsVersion>\r\n    <UpgradeBackupLocation />\r\n    <Ta" +
                    "rgetFrameworkProfile />\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" \'$(Con" +
                    "figuration)|$(Platform)\' == \'Debug|AnyCPU\' \">\r\n    <DebugSymbols>true</DebugSymb" +
                    "ols>\r\n    <DebugType>full</DebugType>\r\n    <Optimize>false</Optimize>\r\n    <Outp" +
                    "utPath>bin\\</OutputPath>\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n  " +
                    "  <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n    <Co" +
                    "deAnalysisRuleSet>AllRules.ruleset</CodeAnalysisRuleSet>\r\n    <Prefer32Bit>false" +
                    "</Prefer32Bit>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" \'$(Configuratio" +
                    "n)|$(Platform)\' == \'Release|AnyCPU\' \">\r\n    <DebugType>pdbonly</DebugType>\r\n    " +
                    "<Optimize>true</Optimize>\r\n    <OutputPath>bin\\</OutputPath>\r\n    <DefineConstan" +
                    "ts>TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningL" +
                    "evel>4</WarningLevel>\r\n    <CodeAnalysisRuleSet>AllRules.ruleset</CodeAnalysisRu" +
                    "leSet>\r\n    <Prefer32Bit>false</Prefer32Bit>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r" +
                    "\n    <Reference Include=\"Microsoft.CSharp\" />\r\n    <Reference Include=\"System\" /" +
                    ">\r\n    <Reference Include=\"System.Data\" />\r\n    <Reference Include=\"System.Compo" +
                    "nentModel.DataAnnotations\">\r\n      <RequiredTargetFramework>3.5</RequiredTargetF" +
                    "ramework>\r\n    </Reference>\r\n    <Reference Include=\"System.Web.DynamicData\" />\r" +
                    "\n    <Reference Include=\"System.Web.Mvc, Version=5.1.0.0, Culture=neutral, Publi" +
                    "cKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\">\r\n      <SpecificVersion" +
                    ">False</SpecificVersion>\r\n      <HintPath>..\\..\\..\\..\\lib\\aspnetmvc\\System.Web.M" +
                    "vc.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"System.Web\" />\r\n   " +
                    " <Reference Include=\"System.Web.Extensions\" />\r\n    <Reference Include=\"System.W" +
                    "eb.Abstractions\" />\r\n    <Reference Include=\"System.Web.Routing\" />\r\n    <Refere" +
                    "nce Include=\"System.Xml\" />\r\n    <Reference Include=\"System.Configuration\" />\r\n " +
                    "   <Reference Include=\"System.Xml.Linq\" />\r\n  </ItemGroup>\r\n  <PropertyGroup>\r\n " +
                    "   <VisualStudioVersion Condition=\"\'$(VisualStudioVersion)\' == \'\'\">10.0</VisualS" +
                    "tudioVersion>\r\n    <VSToolsPath Condition=\"\'$(VSToolsPath)\' == \'\'\">$(MSBuildExte" +
                    "nsionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)</VSToolsPath>\r\n  </" +
                    "PropertyGroup>\r\n  <Import Project=\"$(MSBuildBinPath)\\Microsoft.CSharp.targets\" /" +
                    ">\r\n  <Import Project=\"$(VSToolsPath)\\WebApplications\\Microsoft.WebApplication.ta" +
                    "rgets\" Condition=\"\'$(VSToolsPath)\' != \'\'\" />\r\n  <Import Project=\"$(MSBuildExtens" +
                    "ionsPath32)\\Microsoft\\VisualStudio\\v10.0\\WebApplications\\Microsoft.WebApplicatio" +
                    "n.targets\" Condition=\"false\" />\r\n  <!-- To modify your build process, add your t" +
                    "ask inside one of the targets below and uncomment it. \r\n       Other similar ext" +
                    "ension points exist, see Microsoft.Common.targets.\r\n  <Target Name=\"BeforeBuild\"" +
                    ">\r\n  </Target> -->\r\n  <Target Name=\"AfterBuild\" DependsOnTargets=\"AfterBuildComp" +
                    "iler\">\r\n    <PropertyGroup>\r\n      <AreasManifestDir>$(ProjectDir)\\..\\Manifests<" +
                    "/AreasManifestDir>\r\n    </PropertyGroup>\r\n    <!-- If this is an area child proj" +
                    "ect, uncomment the following line:\r\n    <CreateAreaManifest AreaName=\"$(Assembly" +
                    "Name)\" AreaType=\"Child\" AreaPath=\"$(ProjectDir)\" ManifestPath=\"$(AreasManifestDi" +
                    "r)\" ContentFiles=\"@(Content)\" />\r\n    -->\r\n    <!-- If this is an area parent pr" +
                    "oject, uncomment the following lines:\r\n    <CreateAreaManifest AreaName=\"$(Assem" +
                    "blyName)\" AreaType=\"Parent\" AreaPath=\"$(ProjectDir)\" ManifestPath=\"$(AreasManife" +
                    "stDir)\" ContentFiles=\"@(Content)\" />\r\n    <CopyAreaManifests ManifestPath=\"$(Are" +
                    "asManifestDir)\" CrossCopy=\"false\" RenameViews=\"true\" />\r\n    -->\r\n  </Target>\r\n " +
                    " <Target Name=\"AfterBuildCompiler\" Condition=\"\'$(MvcBuildViews)\'==\'true\'\">\r\n    " +
                    "<AspNetCompiler VirtualPath=\"temp\" PhysicalPath=\"$(ProjectDir)\\..\\$(ProjectName)" +
                    "\" />\r\n  </Target>\r\n  <ProjectExtensions>\r\n    <VisualStudio>\r\n      <FlavorPrope" +
                    "rties GUID=\"{349c5851-65df-11da-9384-00065b846f21}\">\r\n        <WebProjectPropert" +
                    "ies>\r\n          <UseIIS>False</UseIIS>\r\n          <AutoAssignPort>True</AutoAssi" +
                    "gnPort>\r\n          <DevelopmentServerPort>45979</DevelopmentServerPort>\r\n       " +
                    "   <DevelopmentServerVPath>/</DevelopmentServerVPath>\r\n          <IISUrl>\r\n     " +
                    "     </IISUrl>\r\n          <NTLMAuthentication>False</NTLMAuthentication>\r\n      " +
                    "    <UseCustomServer>True</UseCustomServer>\r\n          <CustomServerUrl>http://c" +
                    "oevery.codeplex.com</CustomServerUrl>\r\n          <SaveServerSettingsInUserFile>F" +
                    "alse</SaveServerSettingsInUserFile>\r\n        </WebProjectProperties>\r\n      </Fl" +
                    "avorProperties>\r\n    </VisualStudio>\r\n  </ProjectExtensions>\r\n</Project>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class ModuleCsProjBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
