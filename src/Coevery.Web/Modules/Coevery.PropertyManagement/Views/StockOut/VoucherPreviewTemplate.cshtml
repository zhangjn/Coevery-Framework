@{
    Style.Include("Voucher.css");
    Script.Require("handlebars");
    Script.Require("chineseAmountConvert");
}
<hr />
<h2>
    出库单<label>(成都润茂物业管理)</label>{{#if VoucherNo}}<span>单号：{{VoucherNo}}</span>{{/if}}
</h2>
<div id="oder-date">制单日期：<span>{{CurrentDate}}</span></div>
<table border="1">
    <thead>
        <tr>
            <th>序号</th>
            <th>货品编码</th>
            <th>货品名称</th>
            <th>品牌</th>
            <th>规格型号</th>
            <th>单位</th>>
            <th>数量</th>
            <th>单价</th>
            <th>合计</th>
            <th>备注</th>
        </tr>
    </thead>
    <tbody>
        {{#each List}}
        <tr>
            <td>{{Id}}</td>
            <td>{{Material_SerialNo}}</td>
            <td>{{Material_Name}}</td>
            <td>{{Material_Brand}}</td>
            <td>{{Material_Model}}</td>
            <td>{{Material_Unit}}</td>
            <td>{{toFixed Number 1}}</td>
            <td>{{toFixed CostPrice 2}}</td>
            <td>{{toFixed Total 2}}</td>
            {{#compare @Html.Raw("@index") 0}}
            <td rowspan="{{../../List.length}}"></td>
            {{/compare}}
        </tr>
        {{/each}}
        <tr class="money-disp">
            <td>金额大写</td>
            <td colspan="5">{{toChineseCaptial TotalMoney}}</td>
            <td>总价合计</td>
            <td colspan="5">{{toFixed TotalMoney 2}}</td>
        </tr>
    </tbody>
</table>
<div class="sign">
    <div class="sign-left"><label>出库人：</label><span> </span></div>
    <div class="sign-right"><label>负责人签字：</label><span> </span></div>
</div>
<div class="sign-date"><label>日期：</label><span> </span></div>
<hr />

@using (Script.Foot())
{
    <script>
        $(function () {
            Handlebars.registerHelper('toChineseCaptial', function (number) {
                return convertToChinese(number);
            });
            
            Handlebars.registerHelper('toFixed', function (value, options) {
                return new Handlebars.SafeString((value != null) ? (+value).toFixed(options) : "");
            });

            Handlebars.registerHelper('compare', function (lvalue, operator, rvalue, options) {

                var operators, result;

                if (arguments.length < 3) {
                    throw new Error("Handlerbars Helper 'compare' needs 2 parameters");
                }

                if (options === undefined) {
                    options = rvalue;
                    rvalue = operator;
                    operator = "===";
                }

                operators = {
                    '==': function (l, r) { return l == r; },
                    '===': function (l, r) { return l === r; },
                    '!=': function (l, r) { return l != r; },
                    '!==': function (l, r) { return l !== r; },
                    '<': function (l, r) { return l < r; },
                    '>': function (l, r) { return l > r; },
                    '<=': function (l, r) { return l <= r; },
                    '>=': function (l, r) { return l >= r; },
                    'typeof': function (l, r) { return typeof l == r; }
                };

                if (!operators[operator]) {
                    throw new Error("Handlerbars Helper 'compare' doesn't know the operator " + operator);
                }

                result = operators[operator](lvalue, rvalue);

                if (result) {
                    return options.fn(this);
                } else {
                    return options.inverse(this);
                }

            });
        });
    </script>
}